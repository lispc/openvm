#[cfg(target_os = "zkvm")]
use {
    axvm_platform::constants::{Custom1Funct3, PairingBaseFunct7, CUSTOM_1},
    axvm_platform::custom_insn_r,
    core::mem::MaybeUninit,
};

use super::{Bls12381Fp, Bls12381Fp2};
use crate::field::{Field, FieldExtension, Fp12Mul, FrobeniusCoeffs, SexticExtField, Xi};

pub type Bls12381Fp12 = SexticExtField<Bls12381Fp2>;

impl FieldExtension for Bls12381Fp12 {
    type BaseField = Bls12381Fp2;
    type Coeffs = [Bls12381Fp2; 6];
    type SelfRef<'a> = &'a Self;

    fn from_coeffs(coeffs: Self::Coeffs) -> Self {
        Self::new([
            coeffs[0].clone(),
            coeffs[2].clone(),
            coeffs[4].clone(),
            coeffs[1].clone(),
            coeffs[3].clone(),
            coeffs[5].clone(),
        ])
    }

    fn to_coeffs(self) -> Self::Coeffs {
        [
            self.c[0].clone(),
            self.c[1].clone(),
            self.c[2].clone(),
            self.c[3].clone(),
            self.c[4].clone(),
            self.c[5].clone(),
        ]
    }

    fn embed(base_elem: Self::BaseField) -> Self {
        Self::new([
            base_elem,
            <Self::BaseField as Field>::zero(),
            <Self::BaseField as Field>::zero(),
            <Self::BaseField as Field>::zero(),
            <Self::BaseField as Field>::zero(),
            <Self::BaseField as Field>::zero(),
        ])
    }

    fn conjugate(&self) -> Self {
        Self::new([
            self.c[0].clone(),
            -self.c[1].clone(),
            self.c[2].clone(),
            -self.c[3].clone(),
            self.c[4].clone(),
            -self.c[5].clone(),
        ])
    }

    fn frobenius_map(&self, power: usize) -> Self {
        if power != 1 {
            panic!("BLS12-381 frobenius map power must be 1");
        }
        let c0 = self.c[0].conjugate();
        let c1 = self.c[1].conjugate() * Self::FROBENIUS_COEFFS[power][0].clone();
        let c2 = self.c[2].conjugate() * Self::FROBENIUS_COEFFS[power][1].clone();
        let c3 = self.c[3].conjugate() * Self::FROBENIUS_COEFFS[power][2].clone();
        let c4 = self.c[4].conjugate() * Self::FROBENIUS_COEFFS[power][3].clone();
        let c5 = self.c[5].conjugate() * Self::FROBENIUS_COEFFS[power][4].clone();
        Self::new([c0, c1, c2, c3, c4, c5])
    }

    fn mul_base(&self, rhs: Self::BaseField) -> Self {
        Self::new([
            &self.c[0] * &rhs,
            &self.c[1] * &rhs,
            &self.c[2] * &rhs,
            &self.c[3] * &rhs,
            &self.c[4] * &rhs,
            &self.c[5] * &rhs,
        ])
    }
}

impl Fp12Mul for Bls12381Fp12 {
    type Fp = Bls12381Fp;
    type Fp2 = Bls12381Fp2;
    const XI: Self::Fp2 = Bls12381Fp2::XI;

    #[inline(always)]
    fn fp12_mul(&mut self, other: &Self) {
        #[cfg(not(target_os = "zkvm"))]
        {
            // The following multiplication is hand-derived for Fp12 * Fp12:
            // c0 = cs0co0 + xi(cs1co2 + cs2co1 + cs3co5 + cs4co4 + cs5co3)
            // c1 = cs0co1 + cs1co0 + cs3co3 + xi(cs2co2 + cs4co5 + cs5co4)
            // c2 = cs0co2 + cs1co1 + cs2co0 + cs3co4 + cs4co3 + xi(cs5co5)
            // c3 = cs0co3 + cs3co0 + xi(cs1co5 + cs2co4 + cs4co2 + cs5co1)
            // c4 = cs0co4 + cs1co3 + cs3co1 + cs4co0 + xi(cs2co5 + cs5co2)
            // c5 = cs0co5 + cs1co4 + cs2co3 + cs3co2 + cs4co1 + cs5co0
            //   where cs*: self.c*, co*: other.c*

            let (s0, s1, s2, s3, s4, s5) = (
                &self.c[0], &self.c[2], &self.c[4], &self.c[1], &self.c[3], &self.c[5],
            );
            let (o0, o1, o2, o3, o4, o5) = (
                &other.c[0],
                &other.c[2],
                &other.c[4],
                &other.c[1],
                &other.c[3],
                &other.c[5],
            );

            let c0 = s0 * o0 + Self::XI * &(s1 * o2 + s2 * o1 + s3 * o5 + s4 * o4 + s5 * o3);
            let c1 = s0 * o1 + s1 * o0 + s3 * o3 + Self::XI * &(s2 * o2 + s4 * o5 + s5 * o4);
            let c2 = s0 * o2 + s1 * o1 + s2 * o0 + s3 * o4 + s4 * o3 + Self::XI * &(s5 * o5);
            let c3 = s0 * o3 + s3 * o0 + Self::XI * &(s1 * o5 + s2 * o4 + s4 * o2 + s5 * o1);
            let c4 = s0 * o4 + s1 * o3 + s3 * o1 + s4 * o0 + Self::XI * &(s2 * o5 + s5 * o2);
            let c5 = s0 * o5 + s1 * o4 + s2 * o3 + s3 * o2 + s4 * o1 + s5 * o0;

            *self = Self::new([c0, c3, c1, c4, c2, c5]);
        }
        #[cfg(target_os = "zkvm")]
        {
            custom_insn_r!(
                CUSTOM_1,
                Custom1Funct3::Pairing as usize,
                PairingBaseFunct7::Fp12Mul as usize,
                self as *mut Self,
                self as *const Self,
                other as *const Self
            )
        }
    }

    #[inline(always)]
    fn fp12_mul_refs(&self, other: &Self) -> Self {
        #[cfg(not(target_os = "zkvm"))]
        {
            let mut res = self.clone();
            res.fp12_mul(other);
            res
        }
        #[cfg(target_os = "zkvm")]
        {
            let mut uninit: MaybeUninit<Self> = MaybeUninit::uninit();
            custom_insn_r!(
                CUSTOM_1,
                Custom1Funct3::Pairing as usize,
                PairingBaseFunct7::Fp12Mul as usize,
                uninit.as_mut_ptr(),
                self as *const Self,
                other as *const Self
            );
            unsafe { uninit.assume_init() }
        }
    }
}

impl FrobeniusCoeffs for Bls12381Fp12 {
    type Fp = Bls12381Fp;
    type Fp2 = Bls12381Fp2;

    // Only frobenius power 1 is supported for BLS12-381
    const FROBENIUS_COEFFS: [[Self::Fp2; 5]; 4] = [
        [
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
        ],
        [
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    172, 170, 0, 0, 0, 0, 253, 139, 253, 255, 73, 79, 235, 39, 148, 64, 155, 95,
                    184, 15, 101, 41, 125, 137, 212, 154, 117, 137, 125, 133, 13, 170, 133, 222,
                    212, 99, 134, 64, 2, 236, 153, 230, 127, 57, 234, 17, 1, 26,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    173, 170, 0, 0, 0, 0, 253, 139, 253, 255, 73, 79, 235, 39, 148, 64, 155, 95,
                    184, 15, 101, 41, 125, 137, 212, 154, 117, 137, 125, 133, 13, 170, 133, 222,
                    212, 99, 134, 64, 2, 236, 153, 230, 127, 57, 234, 17, 1, 26,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    184, 95, 35, 146, 237, 117, 7, 141, 61, 129, 231, 99, 61, 165, 126, 246, 196,
                    185, 186, 132, 215, 67, 36, 123, 79, 95, 189, 60, 253, 3, 214, 15, 31, 13, 44,
                    32, 180, 190, 49, 194, 103, 6, 187, 2, 191, 211, 4, 25,
                ]),
                c1: Bls12381Fp([
                    243, 74, 220, 109, 18, 138, 247, 44, 194, 126, 108, 77, 193, 90, 45, 40, 95,
                    60, 246, 113, 201, 142, 12, 236, 111, 179, 199, 182, 135, 71, 161, 84, 184,
                    159, 31, 35, 2, 233, 233, 136, 50, 224, 196, 54, 43, 62, 252, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    162, 222, 27, 18, 4, 123, 238, 241, 10, 250, 103, 62, 207, 102, 68, 48, 94,
                    180, 30, 246, 137, 100, 57, 239, 96, 207, 177, 48, 217, 237, 61, 28, 217, 44,
                    122, 215, 72, 196, 233, 226, 142, 166, 128, 1, 230, 3, 82, 19,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    22, 129, 7, 128, 233, 250, 24, 155, 50, 135, 127, 37, 110, 62, 58, 198, 102, 5,
                    156, 142, 77, 223, 234, 139, 238, 143, 11, 12, 36, 22, 152, 243, 69, 224, 177,
                    72, 107, 250, 71, 223, 216, 95, 58, 1, 217, 207, 178, 5,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
        ],
        [
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
        ],
        [
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
            Bls12381Fp2 {
                c0: Bls12381Fp([
                    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
                c1: Bls12381Fp([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]),
            },
        ],
    ];
}
